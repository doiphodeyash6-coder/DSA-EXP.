#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

// Maximum number of vertices (adjust as needed)
#define MAX_V 100

// Structure for queue in BFS
typedef struct {
    int items[MAX_V];
    int front;
    int rear;
} Queue;

// Initialize queue
void initQueue(Queue *q) {
    q->front = -1;
    q->rear = -1;
}

// Check if queue is empty
bool isEmpty(Queue *q) {
    return q->front == -1;
}

// Enqueue operation
void enqueue(Queue *q, int value) {
    if (q->rear == MAX_V - 1) {
        printf("Queue overflow\n");
        return;
    }
    if (q->front == -1) q->front = 0;
    q->rear++;
    q->items[q->rear] = value;
}

// Dequeue operation
int dequeue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue underflow\n");
        return -1;
    }
    int value = q->items[q->front];
    if (q->front == q->rear) {
        q->front = -1;
        q->rear = -1;
    } else {
        q->front++;
    }
    return value;
}

// BFS function
void BFS(int adj[MAX_V][MAX_V], int n, int s, bool visited[]) {
    Queue q;
    initQueue(&q);
    
    visited[s] = true;
    enqueue(&q, s);
    
    printf("BFS Traversal starting from %d: ", s);
    while (!isEmpty(&q)) {
        int u = dequeue(&q);
        printf("%d ", u);
        
        // Visit all adjacent vertices of u
        for (int v = 0; v < n; v++) {
            if (adj[u][v] == 1 && !visited[v]) {
                visited[v] = true;
                enqueue(&q, v);
            }
        }
    }
    printf("\n");
}

// Recursive DFS function
void DFSUtil(int adj[MAX_V][MAX_V], int u, bool visited[], int n) {
    visited[u] = true;
    printf("%d ", u);
    
    // Visit all adjacent vertices of u
    for (int v = 0; v < n; v++) {
        if (adj[u][v] == 1 && !visited[v]) {
            DFSUtil(adj, v, visited, n);
        }
    }
}

// DFS function (wrapper)
void DFS(int adj[MAX_V][MAX_V], int n, int s, bool visited[]) {
    printf("DFS Traversal starting from %d: ", s);
    DFSUtil(adj, s, visited, n);
    printf("\n");
}

int main() {
    int n, s;
    int adj[MAX_V][MAX_V];
    bool visited[MAX_V];
    
    printf("Enter number of vertices (n): ");
    scanf("%d", &n);
    
    printf("Enter adjacency matrix (%d x %d, 1 for edge, 0 otherwise):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &adj[i][j]);
        }
    }
    
    printf("Enter starting vertex s (0 to %d): ", n-1);
    scanf("%d", &s);
    
    // Initialize visited array
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }
    
    // Perform BFS
    BFS(adj, n, s, visited);
    
    // Reset visited for DFS
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }
    
    // Perform DFS
    DFS(adj, n, s, visited);
    
    return 0;
}
