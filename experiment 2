#include <stdio.h>
#include <ctype.h>  // for isalnum()
#define MAX 100

char stack[MAX];
int top = -1;

// Push element onto stack
void push(char c) {
    if (top == MAX - 1) {
        printf("Stack Overflow!\n");
    } else {
        stack[++top] = c;
    }
}

// Pop element from stack
char pop() {
    if (top == -1) {
        return -1;  // Stack empty
    } else {
        return stack[top--];
    }
}

// Peek top element
char peek() {
    if (top == -1) return -1;
    return stack[top];
}

// Function to return precedence of operators
int precedence(char op) {
    if (op == '^')
        return 3;
    else if (op == '*' || op == '/')
        return 2;
    else if (op == '+' || op == '-')
        return 1;
    else
        return 0;
}

// Infix to Postfix Conversion
void infixToPostfix(char* infix) {
    char postfix[MAX];
    int i = 0, k = 0;
    char symbol, temp;

    while ((symbol = infix[i++]) != '\0') {
        if (isalnum(symbol)) {  // operand â†’ output
            postfix[k++] = symbol;
        }
        else if (symbol == '(') {
            push(symbol);
        }
        else if (symbol == ')') {
            while ((temp = pop()) != '(') {
                postfix[k++] = temp;
            }
        }
        else {  // operator
            while (top != -1 && precedence(peek()) >= precedence(symbol)) {
                postfix[k++] = pop();
            }
            push(symbol);
        }
    }

    // Pop remaining operators
    while (top != -1) {
        postfix[k++] = pop();
    }
    postfix[k] = '\0';

    printf("Postfix Expression: %s\n", postfix);
}

int main() {
    char infix[MAX];
    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infixToPostfix(infix);
    return 0;
}



